	public:
		int roleid;
		char flag;
		enum { PROTOCOL_TYPE = PROTOCOL_TRYCHANGEDS };
	public:
		TryChangeDS() { type = PROTOCOL_TRYCHANGEDS; }
		TryChangeDS(void*) : Protocol(PROTOCOL_TRYCHANGEDS) { }
		TryChangeDS (int l_roleid,char l_flag = 0)
			 : roleid(l_roleid),flag(l_flag)
		{
			type = PROTOCOL_TRYCHANGEDS;
		}

		TryChangeDS(const TryChangeDS &rhs)
			: Protocol(rhs),roleid(rhs.roleid),flag(rhs.flag) { }

		GNET::Protocol *Clone() const { return new TryChangeDS(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << flag;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> flag;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 32; }
